#!/bin/bash

# Prepare ReactOS sources for compilation on a Linux system
# Version: 0.9.1 2018-03-05
# Author: SilvÃ©rio Santos

# Name of the folder to download into
dlfolder=downloads
# Path to the optional modules
optmodules=reactos/modules/optional/

# Check for tools required by this script, POSIX compatible method
chkScriptTools(){
    command -v wget >/dev/null 2>&1 || { 
        echo "wget is needed for this script, please install it."
        quit 1;
    }
    command -v whiptail >/dev/null 2>&1 || { 
        echo "whiptail is needed for this script, please install it."
        quit 1;
    }
}

# Git clone subfolder reactos if it does not exist. If it does, it should contain the reactos source files.
chkReactos(){
    if [ ! -d ./reactos ]; then
        if (whiptail --title "No reactos folder found" --yesno "Do you wish to git clone ReactOS sources?" 8 78) then
            whiptail --title "Git clone" --msgbox "Will git clone ReactOS sources. This will take some time. Press Enter to start." 8 78
            git clone https://github.com/reactos/reactos.git
            return 0;
        else
            return 1;
        fi
    fi
}

# Create the Dockerfile if it does not exist
chkDockerfile(){
    if [ ! -e Dockerfile ]; then
        cat <<EOF > Dockerfile
FROM ubuntu:16.04
MAINTAINER Silverio Santos

RUN apt-get update \
 && apt-get install -y \
 bison \
 flex \
 gcc \
 grep \
 make \
 g++ \
 python \
 git \
 texinfo \
 pkg-config \
 zlib1g-dev
COPY RosBE-Unix-2.1.2.tar.bz2 .
RUN tar xjf RosBE-Unix-2.1.2.tar.bz2
RUN cd RosBE-Unix-2.1.2 \
 && echo -e "\n\n"|./RosBE-Builder.sh
COPY build-bootcd.sh .
EOF
    fi
}

# Create downloads folder if it does not exist
chkDlFolder(){
    if [ ! -d ${dlfolder} ]; then
        mkdir ${dlfolder};
    fi
}

# Create optional modules folder if it does not exist
chkModulesFolder(){
    chkReactos
    if [ ! -d ${optmodules}/ ]; then
        mkdir ${optmodules}/;
    fi
}

# Get Linux ReactOS Build environment
getRosbe(){
    # Only download if file not exists
    if [ ! -e ${dlfolder}/RosBE-Unix-2.1.2.tar.bz2 ]; then
        chkDlFolder
        cd ${dlfolder}
        wget https://downloads.sourceforge.net/reactos/RosBE-Unix-2.1.2.tar.bz2
        cd ..;
    fi
}

# For integration into image: get Gecko file
getGecko(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    # Only download if file not existing
    if [ -e ${optmodules}/wine_gecko-2.40-x86.msi ]; then
        whiptail --title "File already exists" --msgbox "Wine Gecko file already exists. To re-download delete file." 8 78;
    else
        chkModulesFolder
        cd ${optmodules}
        wget http://dl.winehq.org/wine/wine-gecko/2.40/wine_gecko-2.40-x86.msi;
    fi
}

# For integration into image: remove Gecko file
remGecko(){
    # Only delete if file exists
    if [ -e ${optmodules}/wine_gecko-2.40-x86.msi ]; then
        rm ${optmodules}/wine_gecko-2.40-x86.msi
    fi
}

# For integration into image: get MFC files
getMfc(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/vc6redistsetup_deu.exe ]; then
        chkDlFolder
        cd ${dlfolder}
        wget download.microsoft.com/download/vc60pro/update/2/w9xnt4/en-us/vc6redistsetup_deu.exe;
        cd ..
    fi
    if [ ! -d ${dlfolder}/extractmfc ]; then
        mkdir -p ${dlfolder}/extractmfc;
    fi
    cabextract -d ${dlfolder}/extractmfc ${dlfolder}/vc6redistsetup_deu.exe
    cabextract -Ld ${dlfolder}/extractmfc ${dlfolder}/extractmfc/vcredist.exe
    cp  ${dlfolder}/extractmfc/mfc42.dll ${optmodules}/
    cp  ${dlfolder}/extractmfc/mfc42u.dll ${optmodules}/
    cp  ${dlfolder}/extractmfc/msvcirt.dll ${optmodules}/
}

# For integration into image: get NetKVM
getNetkvm(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/virtio-win_x86.vfd ]; then
        chkDlFolder
        cd ${dlfolder}
        wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win_x86.vfd
        cd ..
    fi
    whiptail --title "Root rights" --msgbox "Administrative rights needed to loop mount driver disk and extract files. You might have to enter your password to grant the mount command sudo rights. Press Enter to continue." 8 78
    sudo mount -o loop ${dlfolder}/virtio-win*_x86.vfd /mnt
    cp /mnt/i386/WinXP/netkvm* ${optmodules}/
    mv ${optmodules}/netkvm.inf ${optmodules}/netkvm2k.inf
    mv ${optmodules}/netkvm.cat ${optmodules}/netkvm2k.cat
    sudo umount /mnt
}

# For integration into image: Get Visual Basic 5 files
getVb5(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/msvbvm50.exe ]; then
        chkDlFolder
        cd ${dlfolder}
        wget download.microsoft.com/download/vb50pro/utility/1/win98/en-us/msvbvm50.exe
        cd ..
    fi
    if [ ! -d ${dlfolder}/extractvb5 ]; then
        mkdir ${dlfolder}/extractvb5
    fi
    cabextract -Ld ${dlfolder}/extractvb5 ${dlfolder}/msvbvm50.exe
    cp ${dlfolder}/extractvb5/msvbvm50.dll ${optmodules}/
}

# Build a Docker image with the RosBE environment
buildDockerImg(){
    chkDockerfile
    if [ $? = 0  ]; then
        chkReactos
        if [ $? = 1  ]; then
            return 1 
        fi
        getRosbe
        whiptail --title "Building Docker image" --infobox "This will take a while." 8 78
        docker build -t sisantos/rosbe-dckr .;
    else
        whiptail --title "No Dockerfile" --msgbox "No Dockerfile found, needed for the image creation." 8 78
        return 0
    fi
}

# Run Docker RosBE build environment
runDockerImg(){
    dckrImgExist=$(docker images|grep rosbe-dckr|wc -l)
    if [ $dckrImgExist -ge 1 ]; then
        SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
        docker run \
        --name rosbe-dckr \
        -v $SCRIPTPATH/reactos:/reactos \
        -ti \
        --rm \
        sisantos/rosbe-dckr \
        /usr/local/RosBE/RosBE.sh "/reactos";
    else
        if (whiptail --title "No Docker image found" --yesno "Do you wish to create the Docker image?" 8 78) then
            buildDockerImg
        fi
    fi
}

# Delete the downloads folder
ClearDls(){
    rm -r ${dlfolder};
}

# Menu for optional modules
menuOptMods(){
    until [ "$choiceOM" = "Back" ]; do
        choiceOM=$(whiptail --title "Optional modules" --menu "Choose what module to add" 25 78 16 \
        "Back"         "<<Back to main module." \
        "Add Gecko"    "Add Wine Gecko." \
        "Remove Gecko" "Remove Wine Gecko." \
        "Add MFC"      "Add Microsoft Foundation classes." \
        "Add NetKVM"   "Add VirtIO network drivers." \
        "Add VB5"      "Add Visual Basic 5." \
        3>&2 2>&1 1>&3)
        selectionOM=$(echo $choiceOM | sed 's/ //g')
        case "${selectionOM}" in
            "AddGecko")    getGecko;;
            "RemoveGecko") remGecko;;
            "AddMFC")      getMfc;;
            "AddNetKVM")   getNetkvm;;
            "AddVB5")      getVb5;;
        esac
    done
    choiceOM=""
}

# Main menu
menuMain(){
    choice=$(whiptail --title "Prepare ReactOS compilation" --menu "Choose an option" 25 78 16 \
    "Optional modules" "Add optional modules." \
    "Add RosBE"    "Add ReactOS Build Environment." \
    "Build Docker" "Build RosBE Docker image." \
    "Run Docker"   "Run RosBE Docker build environment." \
    "Clear DLs"    "Clear downloads folder" \
    "Exit"         "Exit." \
    3>&2 2>&1 1>&3)

    selection=$(echo $choice | sed 's/ //g')
    case "${selection}" in
        "Optionalmodules") menuOptMods;;
        "AddRosBE")    getRosbe;;
        "BuildDocker") buildDockerImg;;
        "RunDocker")   runDockerImg;;
        "ClearDLs")    ClearDls;;
        "Exit")        exit 0;;
    esac
    return $?
}

chkScriptTools
while true
do
    menuMain
done
