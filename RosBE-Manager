#!/bin/bash

# Prepare ReactOS sources for compilation on a Linux system
# Version: 0.9.1 2018-03-05
# Author: SilvÃ©rio Santos

# Name of the folder to download into
dlfolder=downloads
# Path to the optional modules
optmodules=reactos/modules/optional/

# Check for tools required by this script, POSIX compatible method
chkScriptTools(){
    command -v wget >/dev/null 2>&1 || { 
        echo "wget is needed for this script, please install it."
        quit 1;
    }
    command -v whiptail >/dev/null 2>&1 || { 
        echo "whiptail is needed for this script, please install it."
        quit 1;
    }
}

# Git clone subfolder reactos if it does not exist. If it does, it should contain the reactos source files.
chkReactos(){
    if [ ! -d ./reactos ]; then
        if (whiptail --title "No reactos folder found" --yesno "Do you wish to git clone ReactOS sources?" 8 78) then
            whiptail --title "Git clone" --msgbox "Will git clone ReactOS sources. This will take some time. Press Enter to start." 8 78
            git clone https://github.com/reactos/reactos.git
            return 0;
        else
            return 1;
        fi
    fi
}

# Create the Dockerfile if it does not exist
chkDockerfile(){
    if [ ! -e Dockerfile ]; then
        cat <<EOF > Dockerfile
FROM ubuntu:16.04
MAINTAINER Silverio Santos

RUN apt-get update \
 && apt-get install -y \
 bison \
 flex \
 gcc \
 grep \
 make \
 g++ \
 python \
 git \
 texinfo \
 pkg-config \
 zlib1g-dev
COPY RosBE-Unix-2.1.2.tar.bz2 .
RUN tar xjf RosBE-Unix-2.1.2.tar.bz2
RUN cd RosBE-Unix-2.1.2 \
 && echo -e "\n\n"|./RosBE-Builder.sh
COPY build-bootcd.sh .
EOF
    fi
}

# Create downloads folder if it does not exist
chkDlFolder(){
    if [ ! -d ${dlfolder} ]; then
        mkdir ${dlfolder};
    fi
}

# Create optional modules folder if it does not exist
chkModulesFolder(){
    chkReactos
    if [ ! -d ${optmodules}/ ]; then
        mkdir ${optmodules}/;
    fi
}

# Get Linux ReactOS Build environment
getRosbe(){
    # Only download if file not exists
    if [ ! -e ${dlfolder}/RosBE-Unix-2.1.2.tar.bz2 ]; then
        chkDlFolder
        wget -P ${dlfolder} https://downloads.sourceforge.net/reactos/RosBE-Unix-2.1.2.tar.bz2
    fi
}

# For integration into image: get Gecko file
getGecko(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    # Only download if file not existing
    if [ -e ${optmodules}/wine_gecko-2.40-x86.msi ]; then
        whiptail --title "File already exists" --msgbox "Wine Gecko file already exists. To re-download delete file." 8 78;
    else
        chkModulesFolder
        wget -P ${optmodules} http://dl.winehq.org/wine/wine-gecko/2.40/wine_gecko-2.40-x86.msi;
    fi
}

# For integration into image: remove Gecko file
remGecko(){
    # Only delete if file exists
    if [ -e ${optmodules}/wine_gecko-2.40-x86.msi ]; then
        rm ${optmodules}/wine_gecko-2.40-x86.msi
    fi
}

# For integration into image: get MFC files
getMfc(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/vc6redistsetup_deu.exe ]; then
        chkDlFolder
        wget -P ${dlfolder} download.microsoft.com/download/vc60pro/update/2/w9xnt4/en-us/vc6redistsetup_deu.exe;
    fi
    if [ ! -d ${dlfolder}/extractmfc ]; then
        mkdir -p ${dlfolder}/extractmfc;
    fi
    cabextract -d ${dlfolder}/extractmfc ${dlfolder}/vc6redistsetup_deu.exe
    cabextract -Ld ${optmodules} -F mfc42*.dll ${dlfolder}/extractmfc/vcredist.exe
    cabextract -Ld ${optmodules} -F msvcirt.dll ${dlfolder}/extractmfc/vcredist.exe
}

# For integration into image: remove MFC files
remMfc(){
    # Only delete if file exists
    if [ -e ${optmodules}/mfc42.dll ]; then
        rm ${optmodules}/mfc42.dll
    fi
    if [ -e ${optmodules}/mfc42u.dll ]; then
        rm ${optmodules}/mfc42u.dll
    fi
    if [ -e ${optmodules}/msvcirt.dll ]; then
        rm ${optmodules}/msvcirt.dll
    fi
}

# For integration into image: get NetKVM
getNetkvm(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/virtio-win_x86.vfd ]; then
        chkDlFolder
        wget -P ${dlfolder} https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win_x86.vfd
    fi
    whiptail --title "Root rights" --msgbox "Administrative rights needed to loop mount driver disk and extract files. You might have to enter your password to grant the mount command sudo rights. Press Enter to continue." 8 78
    sudo mount -o loop ${dlfolder}/virtio-win*_x86.vfd /mnt
    cp /mnt/i386/WinXP/netkvm* ${optmodules}/
    cp ${optmodules}/netkvm.inf ${optmodules}/netkvm2k.inf
    cp ${optmodules}/netkvm.cat ${optmodules}/netkvm2k.cat
    sudo umount /mnt
}

# For integration into image: remove NetKVM files
remNetkvm(){
    rm ${optmodules}/netkvm*
}

# For integration into image: Get Visual Basic 5 files
getVb5(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/msvbvm50.exe ]; then
        chkDlFolder
        wget -P ${dlfolder} download.microsoft.com/download/vb50pro/utility/1/win98/en-us/msvbvm50.exe
    fi
    cabextract -Ld ${optmodules} -F msvbvm50.dll ${dlfolder}/msvbvm50.exe
}

# For integration into image: remove VB5 file
remVb5(){
    # Only delete if file exists
    if [ -e ${optmodules}/msvbvm50.dll ]; then
        rm ${optmodules}/msvbvm50.dll
    fi
}

# For integration into image: Get Visual Basic 6 files
getVb6(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/VB6.0-KB290887-X86.exe ]; then
        chkDlFolder
        wget -P ${dlfolder} download.microsoft.com/download/5/a/d/5ad868a0-8ecd-4bb0-a882-fe53eb7ef348/VB6.0-KB290887-X86.exe        
    fi
    extFldr=${dlfolder}/extractvb6
    if [ ! -d ${extFldr} ]; then
        mkdir ${extFldr}
    fi
    cabextract -Ld ${extFldr} ${dlfolder}/VB6.0-KB290887-X86.exe
    cabextract -Ld ${optmodules} -F msvbvm60.dll ${extFldr}/vbrun60sp6.exe
}

# For integration into image: remove VB6 file
remVb6(){
    # Only delete if file exists
    if [ -e ${optmodules}/msvbvm60.dll ]; then
        rm ${optmodules}/msvbvm60.dll
    fi
}

# For integration into image: B57 GB Eth driver
getB57(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/b57xp32.sys ]; then
        chkDlFolder
        wget -P ${dlfolder} downloadmirror.intel.com/9109/eng/SE8500HW4_BCM57xx_win2k3_7100c.zip
    fi
    # unzip without folder structure stored in zip
    unzip -jd ${optmodules} ${dlfolder}/SE8500HW4_BCM57xx_win2k3_7100c.zip
}

# For integration into image: B57 GB Eth driver
remB57(){
    # Only delete if file exists
    if [ -e ${optmodules}/b57win32.cat ]; then
        rm ${optmodules}/b57win32.cat
    fi
    if [ -e ${optmodules}/b57win32.inf ]; then
        rm ${optmodules}/b57win32.inf
    fi
    if [ -e ${optmodules}/b57xp32.sys ]; then
        rm ${optmodules}/b57xp32.sys
    fi
    if [ -e ${optmodules}/release.txt ]; then
        rm ${optmodules}/release.txt
    fi
}

# For integration into image: AC97 sound driver
getAc97(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/ac97_vbox.exe ]; then
        chkDlFolder
        wget -P ${dlfolder} svn.reactos.org/packages/ac97_vbox.exe
    fi
    7z e -o${optmodules} -ssc- -- ${dlfolder}/ac97_vbox.exe
    mv ${optmodules}/Alcxwdm.sys ${optmodules}/alcxwdm.sys
}

# For integration into image: AC97 sound driver
remAc97(){
    # Only delete if file exists
    if [ -e ${optmodules}/alcxwdm.sys ]; then
        rm ${optmodules}/alcxwdm.sys
    fi
    if [ -e ${optmodules}/alcxwdm.inf ]; then
        rm ${optmodules}/alcxwdm.inf
    fi
}

# Build a Docker image with the RosBE environment
buildDockerImg(){
    chkDockerfile
    if [ $? = 0  ]; then
        chkReactos
        if [ $? = 1  ]; then
            return 1 
        fi
        getRosbe
        whiptail --title "Building Docker image" --infobox "This will take a while." 8 78
        docker build -t sisantos/rosbe-dckr .;
    else
        whiptail --title "No Dockerfile" --msgbox "No Dockerfile found, needed for the image creation." 8 78
        return 0
    fi
}

# Run Docker RosBE build environment
runDockerImg(){
    dckrImgExist=$(docker images|grep rosbe-dckr|wc -l)
    if [ $dckrImgExist -ge 1 ]; then
        SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
        docker run \
        --name rosbe-dckr \
        -v $SCRIPTPATH/reactos:/reactos \
        -ti \
        --rm \
        sisantos/rosbe-dckr \
        /usr/local/RosBE/RosBE.sh "/reactos";
    else
        if (whiptail --title "No Docker image found" --yesno "Do you wish to create the Docker image?" 8 78) then
            buildDockerImg
        fi
    fi
}

# Delete the downloads folder
ClearDls(){
    rm -r ${dlfolder};
}

# Adaptive menu for optional modules
menuOptMods(){
    until [ "$choiceOM" = "Back" ]; do
        declare -a array=("Back" "<<Back to main module.")

        # Wine Gecko
        if [ -e ${optmodules}/wine_gecko-2.40-x86.msi ]; then
            declare -a arrTmp=("Remove Gecko" "Remove Wine Gecko.")
        else
            declare -a arrTmp=("Add Gecko" "Add Wine Gecko.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # MFC
        if [ -e ${optmodules}/mfc42.dll ]; then
            declare -a arrTmp=("Remove MFC" "Remove Microsoft Foundation classes.")
        else
            declare -a arrTmp=("Add MFC" "Add Microsoft Foundation classes.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # NetKVM
        if [ -e ${optmodules}/netkvm.sys ]; then
            declare -a arrTmp=("Remove NetKVM" "Remove VirtIO network drivers.")
        else
            declare -a arrTmp=("Add NetKVM" "Add VirtIO network drivers.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # VB5
        if [ -e ${optmodules}/msvbvm50.dll ]; then
            declare -a arrTmp=("Remove VB5" "Remove Visual Basic 5.")
        else
            declare -a arrTmp=("Add VB5" "Add Visual Basic 5.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # VB6
        if [ -e ${optmodules}/msvbvm60.dll ]; then
            declare -a arrTmp=("Remove VB6" "Remove Visual Basic 6.")
        else
            declare -a arrTmp=("Add VB6" "Add Visual Basic 6.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # B57
        if [ -e ${optmodules}/b57xp32.sys ]; then
            declare -a arrTmp=("Remove B57" "Remove Broadcom NetXtreme (c) GB Ethernet driver.")
        else
            declare -a arrTmp=("Add B57" "Add Broadcom NetXtreme (c) GB Ethernet driver.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""

        # AC97
        if [ -e ${optmodules}/alcxwdm.sys ]; then
            declare -a arrTmp=("Remove AC97" "Remove AC97 sound driver.")
        else
            declare -a arrTmp=("Add AC97" "Add AC97 sound driver.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
                
        # Display menu
        choiceOM=$(whiptail --title "Optional modules (adaptive)" --menu "Choose what module to add" 25 78 16 "${array[@]}"  3>&2 2>&1 1>&3)

        selectionOM=$(echo $choiceOM | sed 's/ //g')
        case "${selectionOM}" in
            "AddGecko")     getGecko;;
            "RemoveGecko")  remGecko;;
            "AddMFC")       getMfc;;
            "RemoveMFC")    remMfc;;
            "AddNetKVM")    getNetkvm;;
            "RemoveNetKVM") remNetkvm;;
            "AddVB5")       getVb5;;
            "RemoveVB5")    remVb5;;
            "AddVB6")       getVb6;;
            "RemoveVB6")    remVb6;;
            "AddB57")       getB57;;
            "RemoveB57")    remB57;;
            "AddAC97")      getAc97;;
            "RemoveAC97")   remAc97;;
        esac
    done
    choiceOM=""
}

# Main menu
menuMain(){
    choice=$(whiptail --title "Prepare ReactOS compilation" --menu "Choose an option" 25 78 16 \
    "Opt. modules" "Optional modules menu..." \
    "Add RosBE"    "Add ReactOS Build Environment." \
    "Build Docker" "Build RosBE Docker image." \
    "Run Docker"   "Run RosBE Docker build environment." \
    "Clear DLs"    "Clear downloads folder" \
    "Exit"         "Exit." \
    3>&2 2>&1 1>&3)

    selection=$(echo $choice | sed 's/ //g')
    case "${selection}" in
        "Opt.modules") menuOptMods;;
        "AddRosBE")    getRosbe;;
        "BuildDocker") buildDockerImg;;
        "RunDocker")   runDockerImg;;
        "ClearDLs")    ClearDls;;
        "Exit")        exit 0;;
    esac
    return $?
}

chkScriptTools
while true
do
    menuMain
done
