#!/bin/bash

# ReactOS compilation on a Linux system
# Version: 1.3 2018-04-12
# Author: SilvÃ©rio Santos

# Name of the folder to download into
dlfolder="downloads"
# Directory the ReactOS source code was checked out with Git
gitCheckoutDir="reactos"
# Subfolder for optional module files
optModulesBase="modules/optional"
# Path to the optional modules
optmodules="${gitCheckoutDir}/$optModulesBase"
# RosBE file
rosbeFile=RosBE-Unix-2.1.2.tar.bz2
# Docker base image
dckrBaseImg=ubuntu:16.04
# DFF file name
dffFolder="${gitCheckoutDir}/output-MinGW-i386/reactos/boot/bootdata/packages"


# Check for tools required by this script, POSIX compatible method
chkScriptTools(){
    command -v wget >/dev/null 2>&1 || { 
        echo "wget is needed for this script, please install it."
        quit 1;
    }
    command -v whiptail >/dev/null 2>&1 || { 
        echo "whiptail is needed for this script, please install it."
        quit 1;
    }
}

# Git clone subfolder reactos if it does not exist. If it does, it should contain the reactos source files.
chkReactos(){
    if [ ! -d ./reactos ]; then
        if (whiptail --title "No reactos folder found" --yesno "Do you wish to git clone ReactOS sources?" 8 78) then
            whiptail --title "Git clone" --msgbox "Will git clone ReactOS sources. This will take some time. Press Enter to start." 8 78
            git clone https://github.com/reactos/reactos.git
            return 0;
        else
            return 1;
        fi
    fi
}

# Create the Dockerfile if it does not exist
chkDockerfile(){
    if [ ! -e Dockerfile ]; then
        cat <<EOF > Dockerfile
FROM $dckrBaseImg
MAINTAINER Silverio Santos

RUN apt-get update \
 && apt-get install -y \
 bison \
 flex \
 gcc \
 grep \
 make \
 g++ \
 python \
 git \
 texinfo \
 pkg-config \
 zlib1g-dev
COPY $dlfolder/$rosbeFile .
RUN tar xjf $rosbeFile
RUN cd RosBE-Unix-2.1.2 \
 && echo -e "\n\n"|./RosBE-Builder.sh
EOF
    fi
}

# Create downloads folder if it does not exist
chkDlFolder(){
    if [ ! -d ${dlfolder} ]; then
        mkdir ${dlfolder};
    fi
}

# Create optional modules folder if it does not exist
chkModulesFolder(){
    chkReactos
    if [ ! -d ${optmodules}/ ]; then
        mkdir ${optmodules}/;
    fi
}

# Makes sure the reactos source files, optional modules
# and download folders exist, checks if the file in the 
# first parameter exists and if not downloads from the
# URL in the second parameter
dlIfNotExist(){
    file=$1
    url=$2
    
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    chkModulesFolder
    # Only download if file not existing
    if [ ! -e ${dlfolder}/${file} ]; then
        chkDlFolder
        wget -P ${dlfolder} ${url};
    fi
}

# Add a text line after a matching text into a text file
txtInFile(){
    # Text line to add
    txt=$1
    # File to add text to
    fil=$2
    # Add txt text line after first occurence of this
    after="\; Optional\/proprietary files"

    if ! grep -qx "$text" ${fil}
    then
        sed -i "/${after}/a ${txt}" ${fil}
    fi
}

# Remove a text line from a text file
txtOutFile(){
    # Text line to delete
    txt=$1
    # File to delete text from
    fil=$2

    if grep -qx "$text" ${fil}
    then
        # Use alternative delimiter "|" to match txt containing "/"
        sed -i "\|^${txt}$|d" ${fil}
    fi
}

# Copy a file to the optional modules folder and configure dff file to
# be included in the image build process
newOptDrvFile(){
    # File to add to optional modules
    file=$1
    # Code in dff file the file is assigned to
    dirCode=$2
    # Folder to copy the files from
    fromDir=$3\

    # Update dff file
    text="\"${optModulesBase}/${file}\" ${dirCode} optional"
    txtInFile "${text}" "${dffFolder}/reactos.dff"

    # Copy file to optional modules folder
    if [ ! -e ${optmodules}/${file} ]; then
        cp ${fromDir}${file} ${optmodules}
    fi
}

# Remove a file from the optional modules folder and remove from the
# dff file to not be regarded in the image build process
remOptDrvFile(){
    # File to remove from optional modules
    file=$1
    # Code in dff file the file is assigned to
    dirCode=$2

    # Update dff file
    text="\"${optModulesBase}/${file}\" ${dirCode} optional"
    txtOutFile "${text}" "${dffFolder}/reactos.dff"

    # Delete file from optional modules folder
    if [ -e ${optmodules}/${file} ]; then
        rm ${optmodules}/${file}
    fi
}

# Make sure the .dff file is available and writable
chkDffFile(){
    if [ ! -d "${gitCheckoutDir}/output-MinGW-i386" ]; then
        if (whiptail --title "Run Docker image?" --yesno "To create the configuration file for non-standard optional modules the configure.sh command has to be run at least once. Do you want to run the RosBE Docker container so you can run ./configure.sh and ninja in output-MinGW-i386/reactos/ (recommended)" 10 78) then
            runDockerImg;
        fi
    elif [ ! -w "${dffFolder}/" ]; then
        whiptail --title "Root rights" --msgbox "Administrative rights needed to be able to configure non-standard optional modules. You might have to enter your password to grant the mount command sudo rights. Press Enter to continue." 10 78
        sudo chmod g+rw ${dffFolder}
        sudo chown :`id -gn` ${dffFolder}
        if [ -d "${dffFolder}/reactos.dff" ]; then
            sudo chown :`id -gn` ${dffFolder}/reactos.dff;
        else
            whiptail --title "File reactos.dff not found" --msgbox "Please " 10 78
        fi
    fi
}

# Get Linux ReactOS Build environment
getRosbe(){
    # Only download if file not exists
    if [ ! -e ${dlfolder}/${rosbeFile} ]; then
        chkDlFolder
        wget -P ${dlfolder} https://downloads.sourceforge.net/reactos/${rosbeFile}
    fi
}

# ********** Optional modules **********

# For integration into image: get Gecko file
getGecko(){
    chkReactos
    if [ $? = 1  ]; then
        return 1 
    fi
    # Only download if file not existing
    if [ -e ${optmodules}/wine_gecko-2.40-x86.msi ]; then
        whiptail --title "File already exists" --msgbox "Wine Gecko file already exists. To re-download delete file." 8 78;
    else
        chkModulesFolder
        wget -P ${optmodules} http://dl.winehq.org/wine/wine-gecko/2.40/wine_gecko-2.40-x86.msi;
    fi
}

# For integration into image: remove Gecko file
remGecko(){
    # Only delete if file exists
    if [ -e ${optmodules}/wine_gecko-2.40-x86.msi ]; then
        rm ${optmodules}/wine_gecko-2.40-x86.msi
    fi
}

# For integration into image: get MFC files
getMfc(){
    dlIfNotExist "vc6redistsetup_deu.exe" "download.microsoft.com/download/vc60pro/update/2/w9xnt4/en-us/vc6redistsetup_deu.exe"
    if [ ! -d ${dlfolder}/extractmfc ]; then
        mkdir -p ${dlfolder}/extractmfc;
    fi
    cabextract -d ${dlfolder}/extractmfc ${dlfolder}/vc6redistsetup_deu.exe
    cabextract -Ld ${optmodules} -F mfc42*.dll ${dlfolder}/extractmfc/vcredist.exe
    cabextract -Ld ${optmodules} -F msvcirt.dll ${dlfolder}/extractmfc/vcredist.exe
}

# For integration into image: remove MFC files
remMfc(){
    # Only delete if file exists
    if [ -e ${optmodules}/mfc42.dll ]; then
        rm ${optmodules}/mfc42.dll
    fi
    if [ -e ${optmodules}/mfc42u.dll ]; then
        rm ${optmodules}/mfc42u.dll
    fi
    if [ -e ${optmodules}/msvcirt.dll ]; then
        rm ${optmodules}/msvcirt.dll
    fi
}

# For integration into image: get NetKVM
getNetkvm(){
    dlIfNotExist "virtio-win_x86.vfd" "https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win_x86.vfd" 
    whiptail --title "Root rights" --msgbox "Administrative rights needed to loop mount driver disk and extract files. You might have to enter your password to grant the mount command sudo rights. Press Enter to continue." 8 78
    sudo mount -o loop ${dlfolder}/virtio-win*_x86.vfd /mnt
    cp /mnt/i386/WinXP/netkvm* ${optmodules}/
    cp ${optmodules}/netkvm.inf ${optmodules}/netkvm2k.inf
    cp ${optmodules}/netkvm.cat ${optmodules}/netkvm2k.cat
    sudo umount /mnt
}

# For integration into image: remove NetKVM files
remNetkvm(){
    rm ${optmodules}/netkvm*
}

# For integration into image: Get Visual Basic 5 files
getVb5(){
    dlIfNotExist "msvbvm50.exe" "download.microsoft.com/download/vb50pro/utility/1/win98/en-us/msvbvm50.exe"
    cabextract -Ld ${optmodules} -F msvbvm50.dll ${dlfolder}/msvbvm50.exe
}

# For integration into image: remove VB5 file
remVb5(){
    # Only delete if file exists
    if [ -e ${optmodules}/msvbvm50.dll ]; then
        rm ${optmodules}/msvbvm50.dll
    fi
}

# For integration into image: Get Visual Basic 6 files
getVb6(){
    dlIfNotExist "VB6.0-KB290887-X86.exe" "download.microsoft.com/download/5/a/d/5ad868a0-8ecd-4bb0-a882-fe53eb7ef348/VB6.0-KB290887-X86.exe"
    extFldr=${dlfolder}/extractvb6
    if [ ! -d ${extFldr} ]; then
        mkdir ${extFldr}
    fi
    cabextract -Ld ${extFldr} ${dlfolder}/VB6.0-KB290887-X86.exe
    cabextract -Ld ${optmodules} -F msvbvm60.dll ${extFldr}/vbrun60sp6.exe
}

# For integration into image: remove VB6 file
remVb6(){
    # Only delete if file exists
    if [ -e ${optmodules}/msvbvm60.dll ]; then
        rm ${optmodules}/msvbvm60.dll
    fi
}

# For integration into image: B57 GB Eth driver
getB57(){
    dlIfNotExist "b57xp32.sys" "downloadmirror.intel.com/9109/eng/SE8500HW4_BCM57xx_win2k3_7100c.zip"
    # unzip without folder structure stored in zip
    unzip -jd ${optmodules} ${dlfolder}/SE8500HW4_BCM57xx_win2k3_7100c.zip
}

# For integration into image: B57 GB Eth driver
remB57(){
    # Only delete if file exists
    if [ -e ${optmodules}/b57win32.cat ]; then
        rm ${optmodules}/b57win32.cat
    fi
    if [ -e ${optmodules}/b57win32.inf ]; then
        rm ${optmodules}/b57win32.inf
    fi
    if [ -e ${optmodules}/b57xp32.sys ]; then
        rm ${optmodules}/b57xp32.sys
    fi
    if [ -e ${optmodules}/release.txt ]; then
        rm ${optmodules}/release.txt
    fi
}

# For integration into image: AC97 sound driver
getAc97(){
    dlIfNotExist "ac97_vbox.exe" "svn.reactos.org/packages/ac97_vbox.exe"
    7z e -o${optmodules} ${dlfolder}/ac97_vbox.exe *lcxwdm.* -r
    mv ${optmodules}/Alcxwdm.sys ${optmodules}/alcxwdm.sys
}

# For integration into image: AC97 sound driver
remAc97(){
    # Only delete if file exists
    if [ -e ${optmodules}/alcxwdm.sys ]; then
        rm ${optmodules}/alcxwdm.sys
    fi
    if [ -e ${optmodules}/alcxwdm.inf ]; then
        rm ${optmodules}/alcxwdm.inf
    fi
}

# Add NIC driver: Intel (R) 82579LM Gigabit Network
addItl82579(){
    drvFolder="${dlfolder}/Intel82579/win32/"
    if [ ! -d ${drvFolder} ]; then
        whiptail --title "Driver folder does not exist" --msgbox "Please copy the driver files into ${drvFolder}" 8 78;
    fi
    newOptDrvFile e1C5132.sys 2 ${drvFolder}
    newOptDrvFile e1C5132.inf 6 ${drvFolder}
    newOptDrvFile e1C5132.cat 6 ${drvFolder}
    newOptDrvFile e1Cmsg.dll 1 ${drvFolder}
    newOptDrvFile NicCo2.dll 1 ${drvFolder}
    newOptDrvFile NicinstC.dll 1 ${drvFolder}
}

# Remove NIC driver: Intel (R) 82579LM Gigabit Network
remItl82579(){
    remOptDrvFile e1C5132.sys 2
    remOptDrvFile e1C5132.inf 6
    remOptDrvFile e1C5132.cat 6
    remOptDrvFile e1Cmsg.dll 1
    remOptDrvFile NicCo2.dll 1
    remOptDrvFile NicinstC.dll 1
}

# Add NIC driver: Broadcom (c) BCM943228HM4L 802.11 a/b/g/n 2x2 WiFi Adapter
addBcm943228HM4L(){
    drvFolder="${dlfolder}/BCM943228HM4L/WinXP/"
    if [ ! -d ${drvFolder} ]; then
        whiptail --title "Driver folder does not exist" --msgbox "Please copy the driver files into ${drvFolder}" 8 78;
    fi
    newOptDrvFile bcmwlcoi.dll 1 ${drvFolder}
    newOptDrvFile bcmwl5.sys 2 ${drvFolder}
    newOptDrvFile bcmwl5.inf 6 ${drvFolder}
    newOptDrvFile bcm43xx.cat 6 ${drvFolder}
}

# Add NIC driver: Broadcom (c) BCM943228HM4L 802.11 a/b/g/n 2x2 WiFi Adapter
remBcm943228HM4L(){
    remOptDrvFile bcmwlcoi.dll 1
    remOptDrvFile bcmwl5.sys 2
    remOptDrvFile bcmwl5.inf 6
    remOptDrvFile bcm43xx.cat 6
}

#addBcm943228HM4L
#remBcm943228HM4L

# ********** Docker **********

# Build a Docker image with the RosBE environment
buildDockerImg(){
    chkDockerfile
    if [ $? = 0  ]; then
        chkReactos
        if [ $? = 1  ]; then
            return 1 
        fi
        getRosbe
        whiptail --title "Building Docker image" --msgbox "This will take a while." 8 78
        docker build -t sisantos/rosbe-dckr .;
    else
        whiptail --title "No Dockerfile" --msgbox "No Dockerfile found, needed for the image creation." 8 78
        return 0
    fi
}

# Tries to download an updated base image and if yes asks for updating
# the RosBE image
updDockerBaseImg(){
    basImgCurr=`docker pull ${dckrBaseImg}|grep "Image is up to date for"|wc -l`
    if [ "$basImgCurr" = "1" ]; then
        whiptail --title "Base image not updated" --msgbox "This can be because simply there is no update or the registry could not be contacted." 8 78
    elif (whiptail --title "Base image updated" --yesno "Do you wish to update the depending RosBE image? (recommended)" 8 78) then
            buildDockerImg
    else
        whiptail --title "Problems updating base image" --msgbox "Problems occured updating Docker base image." 8 78
    fi
}

# Run Docker RosBE build environment
runDockerImg(){
    dckrImgExist=$(docker images|grep rosbe-dckr|wc -l)
    if [ $dckrImgExist -ge 1 ]; then
        SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
        docker run \
        --name rosbe-dckr \
        -v $SCRIPTPATH/reactos:/reactos \
        -ti \
        --rm \
        sisantos/rosbe-dckr \
        /usr/local/RosBE/RosBE.sh "/reactos";
    else
        if (whiptail --title "No Docker image found" --yesno "Do you wish to create the Docker image?" 8 78) then
            buildDockerImg
        fi
    fi
}

# Delete the downloads folder
clearDls(){
    rm -r ${dlfolder};
}

# ********** Translation **********

# Search for untranslated and translate
translateUntr(){
    declare -a langCode=(
        af-ZA 'Afrikaans (South Africa)'
        sq-AL 'Albanian (Albania)'
        gs-FR 'Alsatian (France)'
        am-ET 'Amharic (Ethiopia)'
        ar-DZ 'Arabic (Algeria)'
        ar-BH 'Arabic (Bahrain)'
        ar-EG 'Arabic (Egypt)'
        ar-IQ 'Arabic (Iraq)'
        ar-JO 'Arabic (Jordan)'
        ar-KW 'Arabic (Kuwait)'
        ar-LB 'Arabic (Lebanon)'
        ar-LY 'Arabic (Libya)'
        ar-MA 'Arabic (Morocco)'
        ar-OM 'Arabic (Oman)'
        ar-QA 'Arabic (Qatar)'
        ar-SA 'Arabic (Saudi Arabia)'
        ar-SY 'Arabic (Syria)'
        ar-TN 'Arabic (Tunisia)'
        ar-AE 'Arabic (U.A.E.)'
        ar-YE 'Arabic (Yemen)'
        hy-AM 'Armenian (Armenia)'
        as-IN 'Assamese (India)'
        az-AZ 'Azerbaijani (Azerbaijan, Cyrillic)'
        az-AZ 'Azerbaijani (Azerbaijan, Latin)'
        bn 'Bangla'
        bn-IN 'Bangla (India)'
        ba-RU 'Bashkir (Russia)'
        Ba-Ba 'Basque (Basque)'
        be-BY 'Belarusian (Belarus)'
        bs 'Bosnian'
        bs-BA 'Bosnian (Bosnia and Herzegovina, Cyrillic)'
        bs-BA 'Bosnian (Bosnia and Herzegovina, Latin)'
        br-FR 'Breton (France)'
        bg-BG 'Bulgarian (Bulgaria)'
        ku-IQ 'Central Kurdish (Iraq)'
        ch-Ch 'Cherokee (Cherokee)'
        ca-ES 'Catalan (Spain)'
        zh-HK 'Chinese (Hong Kong SAR, PRC)'
        zh-MO 'Chinese (Macao SAR)'
        zh-SG 'Chinese (Singapore)'
        zh-Ha 'Chinese (Simplified)'
        zh-Ha 'Chinese (Traditional)'
        co-FR 'Corsican (France)'
        hr 'Croatian'
        hr-BA 'Croatian (Bosnia and Herzegovina, Latin)'
        hr-HR 'Croatian (Croatia)'
        cs-CZ 'Czech (Czech Republic)'
        da-DK 'Danish (Denmark)'
        pr-AF 'Dari (Afghanistan)'
        dv-MV 'Divehi (Maldives)'
        nl-BE 'Dutch (Belgium)'
        nl-NL 'Dutch (Netherlands)'
        en-AU 'English (Australia)'
        en-BZ 'English (Belize)'
        en-CA 'English (Canada)'
        en-02 'English (Caribbean)'
        en-IN 'English (India)'
        en-IE 'English (Ireland)'
        en-IE 'English (Ireland)'
        en-JM 'English (Jamaica)'
        en-MY 'English (Malaysia)'
        en-NZ 'English (New Zealand)'
        en-PH 'English (Philippines)'
        en-SG 'English (Singapore)'
        en-ZA 'English (South Africa)'
        en-TT 'English (Trinidad and Tobago)'
        en-GB 'English (United Kingdom)'
        en-US 'English (United States)'
        en-ZW 'English (Zimbabwe)'
        et-EE 'Estonian (Estonia)'
        fo-FO 'Faroese (Faroe Islands)'
        fi-PH 'Filipino (Philippines)'
        fi-FI 'Finnish (Finland)'
        fr-BE 'French (Belgium)'
        fr-CA 'French (Canada)'
        fr-FR 'French (France)'
        fr-LU 'French (Luxembourg)'
        fr-MC 'French (Monaco)'
        fr-CH 'French (Switzerland)'
        fy-NL 'Frisian (Netherlands)'
        gl-ES 'Galician (Spain)'
        ka-GE 'Georgian (Georgia)'
        de-AT 'German (Austria)'
        de-DE 'German (Germany)'
        de-LI 'German (Liechtenstein)'
        de-LU 'German (Luxembourg)'
        de-CH 'German (Switzerland)'
        el-GR 'Greek (Greece)'
        kl-GL 'Greenlandic (Greenland)'
        gu-IN 'Gujarati (India)'
        ha-NG 'Hausa (Nigeria)'
        ha-US 'Hawiian (United States)'
        he-IL 'Hebrew (Israel)'
        hi-IN 'Hindi (India)'
        hu-HU 'Hungarian (Hungary)'
        is-IS 'Icelandic (Iceland)'
        ig-NG 'Igbo (Nigeria)'
        id-ID 'Indonesian (Indonesia)'
        iu-CA 'Inuktitut (Canada)'
        iu-CA 'Inuktitut (Canada)'
        ga-IE 'Irish (Ireland)'
        xh-ZA 'isiXhosa (South Africa)'
        zu-ZA 'isiZulu (South Africa)'
        it-IT 'Italian (Italy)'
        it-CH 'Italian (Switzerland)'
        ja-JP 'Japanese (Japan)'
        kn-IN 'Kannada (India)'
        kk-KZ 'Kazakh (Kazakhstan)'
        kh-KH 'Khmer (Cambodia)'
        qu-GT "K'iche (Guatemala)"
        rw-RW 'Kinyarwanda (Rwanda)'
        ko-IN 'Konkani (India)'
        ko-KR 'Korean (Korea)'
        ky-KG 'Kyrgyz (Kyrgyzstan)'
        lo-LA 'Lao (Lao PDR)'
        lv-LV 'Latvian (Latvia)'
        lt-LT 'Lithuanian (Lithuanian)'
        ds-DE 'Lower Sorbian (Germany)'
        lb-LU 'Luxembourgish (Luxembourg)'
        mk-FY 'Macedonian (Macedonia)'
        ms-BN 'Malay (Brunei Darassalam)'
        ms-MY 'Malay (Malaysia)'
        ml-IN 'Malayalam (India)'
        mt-MT 'Maltese (Malta)'
        mi-NZ 'Maori (New Zealand)'
        ar-CL 'Mapudungun (Chile)'
        mr-IN 'Marathi (India)'
        mo-CA 'Mohawk (Canada)'
        mn-MN 'Mongolian (Mongolia, Cyrillic)'
        mn-MN 'Mongolian (Mongolia, Mong)'
        ne-NP 'Nepali (Nepal)'
        ne-IN 'Nepali (India)'
        no-NO 'Norwegian (BokmÃ¥l, Norway)'
        no-NO 'Norwegian (Nynorsk, Norway)'
        oc-FR 'Occitan (France)'
        or-IN 'Odia (India)'
        ps-AF 'Pashto (Afghanistan)'
        fa-IR 'Persian (Iran)'
        pl-PL 'Polish (Poland)'
        pt-BR 'Portuguese (Brazil)'
        pt-PT 'Portuguese (Portugal)'
        ff-SN 'Pular (Senegal)'
        pa-IN 'Punjabi (India, Gurmukhi script)'
        pa-PK 'Punjabi (Pakistan, Arabic script)'
        qu-BO 'Quechua (Bolivia)'
        qu-EC 'Quechua (Ecuador)'
        qu-PE 'Quechua (Peru)'
        ro-RO 'Romanian (Romania)'
        rm-CH 'Romansh (Switzerland)'
        ru-RU 'Russian (Russia)'
        sa-RU 'Sakha (Russia)'
        sm-FI 'Sami (Inari, Finland)'
        sm-NO 'Sami (Lule, Norway)'
        sm-SE 'Sami (Lule, Sweden)'
        se-FI 'Sami (Northern, Finland)'
        se-NO 'Sami (Northern, Norway)'
        se-SE 'Sami (Northern, Sweden)'
        sm-FI 'Sami (Skolt, Finland)'
        sm-NO 'Sami (Southern, Norway)'
        sm-SE 'Sami (Southern, Sweden)'
        sa-IN 'Sanskrit (India)'
        sr 'Serbian'
        sr-BA 'Serbian (Bosnia and Herzegovina, Cyrillic)'
        sr-BA 'Serbian (Bosnia and Herzegovina, Latin)'
        sr-HR 'Serbian (Croatia)'
        sr-fo 'Serbian (Serbia and Montenegro)'
        sr-fo 'Serbian (Serbia and Montenegro)'
        ns-ZA 'Sesotho sa Leboa (South Africa)'
        tn-BW 'Setswana / Tswana (Botswana)'
        tn-ZA 'Setswana / Tswana (South Africa)'
        sd-PK 'Sindhi (Pakistan)'
        si-LK 'Sinhala (Sri Lanka)'
        sk-SK 'Slovak (Slovakia)'
        sl-SI 'Slovenian (Slovenia)'
        es-AR 'Spanish (Argentina)'
        es-BO 'Spanish (Bolivia)'
        es-CL 'Spanish (Chile)'
        es-CO 'Spanish (Colombia)'
        es-CR 'Spanish (Costa Rica)'
        es-DO 'Spanish (Dominican Republic)'
        es-EC 'Spanish (Ecuador)'
        es-SV 'Spanish (El Salvador)'
        es-GT 'Spanish (Guatemala)'
        es-HN 'Spanish (Honduras)'
        es-MX 'Spanish (Mexico)'
        es-NI 'Spanish (Nicaragua)'
        es-PA 'Spanish (Panama)'
        es-PY 'Spanish (Paraguay)'
        es-PE 'Spanish (Peru)'
        es-PR 'Spanish (Puerto Rico)'
        es-ES 'Spanish (Spain, Modern Sort)'
        es-ES 'Spanish (Spain, Traditional Sort)'
        es-US 'Spanish (United States)'
        es-UY 'Spanish (Uruguay)'
        es-VE 'Spanish (Venezuela)'
        sw-KE 'Swahili (Kenya)'
        sv-FI 'Swedish (Finland)'
        sv-SE 'Swedish (Sweden)'
        sv-SE 'Swedish (Sweden)'
        sy-SY 'Syriac (Syria)'
        tg-TJ 'Tajik (Tajikistan, Cyrillic)'
        tz-DZ 'Tamazight (Algeria, Latin)'
        ta-IN 'Tamil (India)'
        ta-LK 'Tamil (Sri Lanka)'
        tt-RU 'Tatar (Russia)'
        te-IN 'Telugu (India)'
        th-TH 'Thai (Thailand)'
        bo-CN 'Tibetan (PRC)'
        ti-ER 'Tigrinya (Eritrea)'
        ti-ET 'Tigrinya (Ethiopia)'
        tr-TR 'Turkish (Turkey)'
        tk-TM 'Turkmen (Turkmenistan)'
        uk-UA 'Ukrainian (Ukraine)'
        hs-DE 'Upper Sorbian (Germany)'
        ur-re 'Urdu'
        ur-PK 'Urdu (Pakistan)'
        ug-CN 'Uyghur (PRC)'
        uz-UZ 'Uzbek (Uzbekistan, Cyrillic)'
        uz-UZ 'Uzbek (Uzbekistan, Latin)'
        ca-ES 'Valencian (Valencia)'
        vi-VN 'Vietnamese (Vietnam)'
        cy-GB 'Welsh (United Kingdom)'
        wo-SN 'Wolof (Senegal)'
        ii-CN 'Yi (PRC)'
        yo-NG 'Yoruba (Nigeria)'
    )
    
    srcLang="en-US"
    
    # Ask for source language
    srcLang=$(whiptail --title "Source language" --menu "Source language definitions." --default-item ${srcLang} 25 78 16 "${langCode[@]}" 3>&2 2>&1 1>&3)
    # Ask for destination language
    dstLang=$(whiptail --title "Source language" --menu "Source language definitions." 25 78 16 "${langCode[@]}" 3>&2 2>&1 1>&3)

    # Search for folders with srcLang.rc and no dstLang.rc
    if [ "$srcLang" = "" ]; then
        exit 1
    fi
    if [ "$dstLang" = "" ]; then
        exit 1
    fi
    declare -a arrLang=()
    whiptail --title "Search for folders" --msgbox "Will search for folders with ${srcLang}.rc and with no ${dstLang}.rc. Press <Enter>." 8 78
    # Do the actual search and fill array
    for i in $(find reactos/ -type d -exec test -e '{}'/${srcLang}.rc -a ! \( -e '{}'/${dstLang}.rc \) \; -print|sort); do
        declare -a arrTmp=("${i}" "");
        arrLang=( "${arrLang[@]}" "${arrTmp[@]}" )
        arrTmp=""
    done

    # Ask to select folder from search result, let edit and if OK copy to final location
    choiceTF=$(whiptail --title "Translate" --menu "Choose what to translate" 25 78 16 "${arrLang[@]}"  3>&2 2>&1 1>&3)
    arrLang=""
    if [ "$choiceTF" != "" ]; then
        cp ${choiceTF}/${srcLang}.rc ${dlfolder}/${dstLang}.rc
        editor ${dlfolder}/${dstLang}.rc
        if (whiptail --title "OK to use?" --yesno "OK to use the translated file?" 25 78 16 "${array[@]}"  3>&2 2>&1 1>&3)
        then
            mv ${dlfolder}/${dstLang}.rc ${choiceTF}/${dstLang}.rc;
        else 
            rm ${dlfolder}/${dstLang}.rc;
        fi
    fi
}

# ********** Menus **********

# Adaptive menu for optional modules
menuOptMods(){
    until [ "$choiceOM" = "Back" ]; do
        declare -a array=("Back" "<<Back to main module.")

        # Wine Gecko
        if [ -e ${optmodules}/wine_gecko-2.40-x86.msi ]; then
            declare -a arrTmp=("Remove Gecko" "Remove Wine Gecko.")
        else
            declare -a arrTmp=("Add Gecko" "Add Wine Gecko.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # MFC
        if [ -e ${optmodules}/mfc42.dll ]; then
            declare -a arrTmp=("Remove MFC" "Remove Microsoft Foundation classes.")
        else
            declare -a arrTmp=("Add MFC" "Add Microsoft Foundation classes.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # NetKVM
        if [ -e ${optmodules}/netkvm.sys ]; then
            declare -a arrTmp=("Remove NetKVM" "Remove VirtIO network drivers.")
        else
            declare -a arrTmp=("Add NetKVM" "Add VirtIO network drivers.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # VB5
        if [ -e ${optmodules}/msvbvm50.dll ]; then
            declare -a arrTmp=("Remove VB5" "Remove Visual Basic 5.")
        else
            declare -a arrTmp=("Add VB5" "Add Visual Basic 5.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # VB6
        if [ -e ${optmodules}/msvbvm60.dll ]; then
            declare -a arrTmp=("Remove VB6" "Remove Visual Basic 6.")
        else
            declare -a arrTmp=("Add VB6" "Add Visual Basic 6.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
        
        # B57
        if [ -e ${optmodules}/b57xp32.sys ]; then
            declare -a arrTmp=("Remove B57" "Remove Broadcom NetXtreme (c) GB Ethernet driver.")
        else
            declare -a arrTmp=("Add B57" "Add Broadcom NetXtreme (c) GB Ethernet driver.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""

        # AC97
        if [ -e ${optmodules}/alcxwdm.sys ]; then
            declare -a arrTmp=("Remove AC97" "Remove AC97 sound driver.")
        else
            declare -a arrTmp=("Add AC97" "Add AC97 sound driver.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""
                               
        # Display menu
        choiceOM=$(whiptail --title "Optional modules (adaptive)" --menu "Choose what module to add" 25 78 16 "${array[@]}"  3>&2 2>&1 1>&3)

        selectionOM=$(echo $choiceOM | sed 's/ //g')
        case "${selectionOM}" in
            "AddGecko")      getGecko;;
            "RemoveGecko")   remGecko;;
            "AddMFC")        getMfc;;
            "RemoveMFC")     remMfc;;
            "AddNetKVM")     getNetkvm;;
            "RemoveNetKVM")  remNetkvm;;
            "AddVB5")        getVb5;;
            "RemoveVB5")     remVb5;;
            "AddVB6")        getVb6;;
            "RemoveVB6")     remVb6;;
            "AddB57")        getB57;;
            "RemoveB57")     remB57;;
            "AddAC97")       getAc97;;
            "RemoveAC97")    remAc97;;
        esac
    done
    choiceOM=""
}

# Adaptive menu for non-stadard optional modules
menuNSOptMods(){
    chkDffFile
    until [ "$choiceNOM" = "Back" ]; do
        declare -a array=("Back" "<<Back to main module.")

        # Intel 82579LM
        if [ -e ${optmodules}/e1C5132.sys ]; then
            declare -a arrTmp=("Remove 82579LM" "Remove Intel 82579LM NIC driver.")
        else
            declare -a arrTmp=("Add 82579LM" "Add Intel 82579LM NIC driver.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""

        # Broadcom (c) BCM943228HM4L 802.11 a/b/g/n 2x2 WiFi Adapter
        if [ -e ${optmodules}/bcmwl5.sys ]; then
            declare -a arrTmp=("Remove BCM943228HM4L" "Remove Broadcom BCM943228HM4L WiFi NIC driver.")
        else
            declare -a arrTmp=("Add BCM943228HM4L" "Add Broadcom BCM943228HM4L WiFi NIC driver.")
        fi
        array=( "${array[@]}" "${arrTmp[@]}" )
        arrTmp=""

        # Display menu
        choiceNOM=$(whiptail --title "Non-standard optional modules (adaptive)" --menu "Choose what non-standard optional module to add" 25 78 16 "${array[@]}"  3>&2 2>&1 1>&3)

        selectionNOM=$(echo $choiceNOM | sed 's/ //g')
        case "${selectionNOM}" in
            "Add82579LM")          addItl82579;;
            "Remove82579LM")       remItl82579;;
            "AddBCM943228HM4L")    addBcm943228HM4L;;
            "RemoveBCM943228HM4L") remBcm943228HM4L;;
        esac
    done
    choiceNOM=""
}

# Main menu
menuMain(){
    choice=$(whiptail --title "Prepare ReactOS compilation" --menu "Choose an option" 25 78 16 \
    "Opt. modules"        "Optional modules menu..." \
    "Opt. modules NonStd" "Non-standard optional modules" \
    "Add RosBE"           "Add ReactOS Build Environment." \
    "Build Docker"        "Build RosBE Docker image." \
    "Update Docker"       "Update Docker base image" \
    "Run Docker"          "Run RosBE Docker build environment." \
    "Transl Untr"         "Translate untranslated" \
    "Clear DLs"           "Clear downloads folder" \
    "Exit"                "Exit." \
    3>&2 2>&1 1>&3)

    selection=$(echo $choice | sed 's/ //g')
    case "${selection}" in
        "Opt.modules")       menuOptMods;;
        "Opt.modulesNonStd") menuNSOptMods;;
        "AddRosBE")          getRosbe;;
        "BuildDocker")       buildDockerImg;;
        "UpdateDocker")      updDockerBaseImg;;
        "RunDocker")         runDockerImg;;
        "TranslUntr")        translateUntr;;
        "ClearDLs")          clearDls;;
        "Exit")              exit 0;;
    esac
    return $?
}

chkScriptTools
while true
do
    menuMain
done
